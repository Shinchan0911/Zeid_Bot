const path = require("path");
const fs = require("fs");
const { execSync } = require("child_process");

module.exports.config = {
    name: "cmd",
    version: "1.0.0",
    role: 2,
    author: "NLam182",
    description: "Qu·∫£n l√Ω v√† ki·ªÉm so√°t c√°c module l·ªánh c·ªßa bot.",
    category: "H·ªá th·ªëng",
    usage: ".cmd <load|unload|loadall|unloadall|list|info> [t√™n l·ªánh]",
    cooldowns: 2
};

async function loadModule(api, event, moduleName) {
    const { threadId, type } = event;
    try {
        const commandPath = path.join(__dirname, `${moduleName}.js`);
        if (!fs.existsSync(commandPath)) {
            return api.sendMessage(`Kh√¥ng t√¨m th·∫•y module '${moduleName}'.`, threadId, type);
        }
        delete require.cache[require.resolve(commandPath)];
        const command = require(commandPath);
        if (!command.config || !command.config.name || typeof command.run !== "function") {
            return api.sendMessage(`Module '${moduleName}' kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng.`, threadId, type);
        }
        const dependencies = command.config.dependencies || {};
        for (const [pkgName, version] of Object.entries(dependencies)) {
            try {
                require.resolve(pkgName);
            } catch {
                api.sendMessage(`ƒêang c√†i package '${pkgName}' cho l·ªánh '${command.config.name}'...`, threadId, type);
                execSync(`npm install ${pkgName}@${version || "latest"} --no-save`, { stdio: "inherit" });
            }
        }
        global.client.commands.set(command.config.name, command);
        if (command.onLoad) {
            await command.onLoad({ api });
        }
        return api.sendMessage(`‚úÖ ƒê√£ t·∫£i th√†nh c√¥ng l·ªánh '${command.config.name}'.`, threadId, type);
    } catch (error) {
        console.error(`L·ªói khi t·∫£i l·ªánh ${moduleName}:`, error);
        return api.sendMessage(`ƒê√£ x·∫£y ra l·ªói khi t·∫£i l·ªánh '${moduleName}':\n${error.message}`, threadId, type);
    }
}

async function unloadModule(api, event, moduleName) {
    const { threadId, type } = event;
    if (!global.client.commands.has(moduleName)) {
        return api.sendMessage(`L·ªánh '${moduleName}' ch∆∞a ƒë∆∞·ª£c t·∫£i.`, threadId, type);
    }
    global.client.commands.delete(moduleName);
    const commandPath = path.join(__dirname, `${moduleName}.js`);
    if (require.cache[require.resolve(commandPath)]) {
        delete require.cache[require.resolve(commandPath)];
    }
    return api.sendMessage(`‚úÖ ƒê√£ g·ª° th√†nh c√¥ng l·ªánh '${moduleName}'.`, threadId, type);
}

module.exports.run = async function({ api, event, args }) {
    const { threadId, type } = event;

    if (!global.users.admin.includes(event.data.uidFrom)) {
        return api.sendMessage("B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y.", threadId, type);
    }

    const action = args[0]?.toLowerCase();
    const moduleName = args[1];

    switch (action) {
        case "load":
            if (!moduleName) return api.sendMessage("Vui l√≤ng nh·∫≠p t√™n l·ªánh c·∫ßn t·∫£i.", threadId, type);
            await loadModule(api, event, moduleName);
            break;

        case "unload":
            if (!moduleName) return api.sendMessage("Vui l√≤ng nh·∫≠p t√™n l·ªánh c·∫ßn g·ª°.", threadId, type);
            await unloadModule(api, event, moduleName);
            break;

        case "loadall":
            try {
                await api.sendMessage("B·∫Øt ƒë·∫ßu qu√° tr√¨nh t·∫£i l·∫°i t·∫•t c·∫£ c√°c l·ªánh...", threadId, type);
                Object.keys(require.cache).forEach(key => {
                    if (key.startsWith(path.join(__dirname))) {
                        delete require.cache[key];
                    }
                });
                global.client.commands.clear();
                const loaderCommand = require("../../core/loader/loaderCommand");
                await loaderCommand();
                await api.sendMessage(`‚úÖ ƒê√£ t·∫£i l·∫°i th√†nh c√¥ng ${global.client.commands.size} l·ªánh.`, threadId, type);
            } catch (error) {
                console.error("L·ªói khi t·∫£i l·∫°i l·ªánh:", error);
                await api.sendMessage(`ƒê√£ x·∫£y ra l·ªói trong qu√° tr√¨nh t·∫£i l·∫°i:\n${error.message}`, threadId, type);
            }
            break;

        case "unloadall":
            try {
                const commandDir = path.join(__dirname);
                const allCommandFiles = fs.readdirSync(commandDir).filter(file => file.endsWith(".js"));
                let unloadedCount = 0;
                for (const file of allCommandFiles) {
                    if (file === "cmd.js") continue;
                    const moduleNameToUnload = path.basename(file, ".js");
                    if (global.client.commands.has(moduleNameToUnload)) {
                        global.client.commands.delete(moduleNameToUnload);
                        delete require.cache[require.resolve(path.join(commandDir, file))];
                        unloadedCount++;
                    }
                }
                await api.sendMessage(`‚úÖ ƒê√£ g·ª° th√†nh c√¥ng ${unloadedCount} l·ªánh.`, threadId, type);
            } catch (error) {
                console.error("L·ªói khi g·ª° t·∫•t c·∫£ l·ªánh:", error);
                await api.sendMessage(`ƒê√£ x·∫£y ra l·ªói khi g·ª° l·ªánh:\n${error.message}`, threadId, type);
            }
            break;

        case "list":
            const commandNames = Array.from(global.client.commands.keys());
            api.sendMessage(`Hi·ªán t·∫°i c√≥ ${commandNames.length} l·ªánh ƒëang ho·∫°t ƒë·ªông:\n\n${commandNames.join(", ")}`, threadId, type);
            break;

        case "info":
            if (!moduleName) return api.sendMessage("Vui l√≤ng nh·∫≠p t√™n l·ªánh c·∫ßn xem th√¥ng tin.", threadId, type);
            const command = global.client.commands.get(moduleName);
            if (!command) return api.sendMessage(`L·ªánh '${moduleName}' kh√¥ng t·ªìn t·∫°i ho·∫∑c ch∆∞a ƒë∆∞·ª£c t·∫£i.`, threadId, type);
            
            const { name, version, role, author, description, category, usage, cooldowns, dependencies } = command.config;
            const roleText = role === 0 ? "Ng∆∞·ªùi d√πng" : role === 1 ? "Support" : "Admin";
            const depsText = dependencies ? Object.keys(dependencies).join(", ") : "Kh√¥ng c√≥";

            const infoMsg = `üîé Th√¥ng tin l·ªánh: ${name.toUpperCase()}\n\n` +
                          `- M√¥ t·∫£: ${description}\n` +
                          `- T√°c gi·∫£: ${author}\n` +
                          `- Phi√™n b·∫£n: ${version}\n` +
                          `- Quy·ªÅn h·∫°n: ${roleText}\n` +
                          `- C√°ch d√πng: ${usage}\n` +
                          `- Dependencies: ${depsText}`;
            api.sendMessage(infoMsg, threadId, type);
            break;

        default:
            api.sendMessage(
                "Qu·∫£n l√Ω module bot\n\n" +
                "cmd load <l·ªánh> - T·∫£i m·ªôt l·ªánh\n" +
                "cmd unload <l·ªánh> - G·ª° m·ªôt l·ªánh\n" +
                "cmd loadall - T·∫£i l·∫°i t·∫•t c·∫£ l·ªánh\n" +
                "cmd unloadall - G·ª° t·∫•t c·∫£ l·ªánh\n" +
                "cmd list - Li·ªát k√™ c√°c l·ªánh\n" +
                "cmd info <l·ªánh> - Xem th√¥ng tin l·ªánh",
                threadId, type
            );
            break;
    }
};
